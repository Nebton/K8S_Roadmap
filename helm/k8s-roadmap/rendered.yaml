---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-sa
  namespace: prod
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend-sa
  namespace: prod
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-sa
  namespace: prod
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: admin-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-role-binding
subjects:
- kind: ServiceAccount
  name: admin-sa
  namespace: prod
roleRef:
  kind: ClusterRole
  name: admin-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: prod
  name: backend-role
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
# Source: k8s-roadmap/templates/service-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backend-role-binding
  namespace: prod
subjects:
- kind: ServiceAccount
  name: backend-sa
  namespace: prod
roleRef:
  kind: Role
  name: backend-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: k8s-roadmap/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  annotations:
    prometheus.io/port: "metrics"
    prometheus.io/scrape: "true"
  labels: 
    app: backend
spec:
  selector:
    app: backend
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: 5000
    - name: metrics
      protocol: TCP
      port: 5005
      targetPort: 5005
---
# Source: k8s-roadmap/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  labels: 
    app: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 5050
      targetPort: 5050
---
# Source: k8s-roadmap/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
      version: v1
  template:
    metadata:
      labels:
        app: backend
        version: v1
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "5005"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: backend-sa
      containers:
      - name: backend-v1
        image: nebton544/k8s_roadmap:backend-c61d6fde0bd40c2f42196fa6637a02834ae12566-v1
        ports:
        - name: http
          containerPort: 5000
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
        envFrom:
          - configMapRef:
              name: app-config
---
# Source: k8s-roadmap/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
      version: v2
  template:
    metadata:
      labels:
        app: backend
        version: v2
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "5005"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: backend-sa
      containers:
      - name: backend-v2
        image: nebton544/k8s_roadmap:backend-c61d6fde0bd40c2f42196fa6637a02834ae12566-v2
        ports:
        - name: http
          containerPort: 5000
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
        envFrom:
          - configMapRef:
              name: app-config
---
# Source: k8s-roadmap/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2 
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: frontend-sa
      containers:
      - name: frontend
        image: nebton544/k8s_roadmap:frontend-c61d6fde0bd40c2f42196fa6637a02834ae12566
        ports:
        - name : http 
          containerPort: 5050
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
        envFrom: 
          - configMapRef:
              name: app-config
---
# Source: k8s-roadmap/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa-v1
  labels:
    app: hpa 
    version: v1
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment-v1
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: k8s-roadmap/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa-v2
  labels:
    app: hpa 
    version: v2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment-v2
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: k8s-roadmap/templates/service-rbac.yaml
## Two regular SA and one Admin
